==============================
How to Use 2-matrix_divided.py
==============================

This module defines a matrix division function ``matrix_divided(matrix, div)``.

Usage
=====

Importing function from the module:
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Divide each element in a matrix by a divisor (matrix is a list of lists, and div is a number):
    >>> matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
    >>> div = 2
    >>> matrix_divided(matrix, div)
    [[0.5, 1.0, 1.5], [2.0, 2.5, 3.0], [3.5, 4.0, 4.5]]

Dividing by zero should raise a ZeroDivisionError:
    >>> matrix_divided(matrix, 0)
    Traceback (most recent call last):
        ...
    ZeroDivisionError: division by zero

Passing a non-numeric divisor should raise a TypeError:
    >>> matrix_divided(matrix, '2')
    Traceback (most recent call last):
        ...
    TypeError: div must be a number

Passing a matrix with rows of different sizes should raise a TypeError:
    >>> invalid_matrix = [[1, 2, 3], [4, 5], [6, 7, 8]]
    >>> matrix_divided(invalid_matrix, 2)
    Traceback (most recent call last):
        ...
    TypeError: Each row of the matrix must have the same size

Passing a non-matrix (not a list of lists) should raise a TypeError:
    >>> not_a_matrix = [1, 2, 3]
    >>> matrix_divided(not_a_matrix, 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Passing an empty matrix should raise a TypeError:
    >>> empty_matrix = []
    >>> matrix_divided(empty_matrix, 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Passing a matrix with non-numeric elements should raise a TypeError:
    >>> invalid_elements_matrix = [[1, 2, 'a'], [4, 5, 6], [7, 8, 9]]
    >>> matrix_divided(invalid_elements_matrix, 2)
    Traceback (most recent call last):
        ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats
